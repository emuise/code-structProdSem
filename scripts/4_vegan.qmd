---
title: "vegan_analysis"
format: html
editor: visual
---

```{r packages}
library(vegan)
library(tidyverse)
library(cols4all)
library(terra)
library(sf)
library(patchwork)
# library(ggradar)
source(here::here("scripts", "get_keys.R"))
```

```{r normal-fun}
mylog <- function(data) {
  if (any(data <= 0)) {
    return(log1p(data))
  } else {
    return(log(data))
  }
}

# normalization from grace et al 2016
# first does mylog (does natural logarithm. if 0s present, does log(one + x))
# then scales to z scores
# results it more normal looking data
normal <- function(data) {
  data %>%
    mylog() %>%
    scale() %>%
    as.numeric()
}


```

```{r theme}
my_theme <- theme_bw() +
  theme(panel.grid = element_blank())

theme_set(my_theme)
```

```{r data-prep}
bec_sample_loc <- here::here("data", "samples", "vlce_extracted.shp")

bec_samples_e <- vect(bec_sample_loc)

bec_df <- bec_samples_e %>% 
  st_as_sf() %>%
  st_drop_geometry() %>%
  select(bec:VarDHI) %>%
  drop_na() %>%
  tibble() %>%
  filter(elev_cv <= 1000) %>% #erroneous pixels
  filter(elev_p95 >= 2000) # non-treed pixels

names_manual <- c(
  "bec",
  "category",
  "basal_area",
  "elev_cv",
  "elev_mean",
  "elev_p95",
  "elev_stddev",
  "gross_stem_volume",
  "loreys_height",
  "percentage_first_returns_above_2m",
  "percentage_first_returns_above_mean",
  "total_biomass",
  "CumDHI",
  "MinDHI",
  "VarDHI"
)

# names(bec_df) <- names(all_rasts)
names(bec_df) <- names_manual

bec_normal <- bec_df %>%
  mutate(across(basal_area:VarDHI,  .fns = ~ normal(.x))) 


```

```{r global-model}
to_rda <- bec_normal %>%
  select(-elev_mean,
         -percentage_first_returns_above_mean,
         -elev_stddev,
         -loreys_height)

forest_types <- bec_normal %>%
  pull(category) %>%
  unique()

# to_rda <- bec_normal %>% 
#   group_by(category) %>% 
#   slice_sample(n = 3000)  %>% 
#   filter(category == "Mixed Wood") %>% 
#   ungroup()

dhi_tab <- to_rda %>%
  select(ends_with("DHI"))

primary <- to_rda %>%
  select(elev_p95,
         elev_cv,
         # elev_stddev,
         percentage_first_returns_above_2m)

modelled <- to_rda %>%
  select(basal_area,
         total_biomass,
         gross_stem_volume)



rda_out <- 
  rda(dhi_tab ~ elev_p95 + percentage_first_returns_above_2m + elev_cv + # simple/raw/primary
      basal_area + gross_stem_volume + total_biomass, # modelled
      data = to_rda)

ordiplot(rda_out, choices = c(1, 2))

rda_sum <- summary(rda_out)

var_exp <- rda_sum$constr.chi / rda_sum$tot.chi

rda_eig <- rda_out$CCA$eig %>%
  as.data.frame() %>%
  t() %>%
  as.data.frame() %>%
  tibble() %>%
  pivot_longer(cols = everything()) %>%
  mutate(prop = value / sum(value),
         var_exp = prop * var_exp)

# scores(rda_out, choices = c(1:3))$species
# scores(rda_out, choices = c(1:3))$biplot
# not actually the loadings, need to get those from correlations

rcorr <- summary(rda_out)$sites %>% 
  as.data.frame() %>% 
  select(starts_with("RDA")) %>% 
  bind_cols(to_rda) %>%
  select(-bec, -category) %>% 
  as.matrix() %>%
  Hmisc::rcorr()

rvals <- rcorr$r %>%
  as.data.frame() %>%
  select(starts_with("RDA")) %>%
  mutate(var = row.names(.)) %>%
  pivot_longer(starts_with("RDA"),
               values_to = "axis_loading",
               names_to = "axis") %>%
  filter(!startsWith(var, "RDA"))

pvals <- rcorr$P %>%
  as.data.frame() %>%
  select(starts_with("RDA")) %>%
  mutate(var = row.names(.)) %>%
  pivot_longer(starts_with("RDA"),
               values_to = "axis_p",
               names_to = "axis") %>%
  filter(!startsWith(var, "RDA"))

all_data_loadings <- left_join(rvals, pvals) %>%
  filter(axis != "RDA3") %>%
  mutate(sig = cut(axis_p, 
                   breaks = c(0, 0.001, 0.01, 0.05, .10, 1),
                   labels = c("***", "**", "*", ".", "NS"),
                   right = F)) 

for_radar_loads <- all_data_loadings %>%
  filter(!endsWith(var, "DHI")) %>%
  mutate(axis_loading = ifelse(sig == "NS", 0, abs(axis_loading))) %>%
  select(var, axis, axis_loading) %>%
  pivot_wider(names_from = var, values_from = axis_loading) %>%
  mutate(cluster = paste(axis, "- British Columbia")) %>%
  select(-axis) %>%
  relocate(cluster)


var_out <- varpart(dhi_tab, primary, modelled)

var_out %>% 
  plot(Xnames = c("Primary", "Modelled"))

path_r2 <- var_out$part$indfract %>%
      mutate(type = c("primary", "modelled", "overlap", "residual")) %>%
      select(type, Adj.R.squared) %>%
  tibble()
```

Metrics derived solely from the point cloud explain 10.6% of the variation in the DHIs, while metrics modelled based on the point cloud explain 3.4% of the variation in the DHIs. 85.9% of the variation is unexplained by structural attributes.

```{r r2-global}
RsquareAdj(rda_out)$adj.r.squared
```

This model shows very little explanatory power. (13.9%)

```{r anova-global}
anova.cca(rda_out, step = 1000)

anova_out <- rda_out  %>%
  anova(by = "axis")

anova_out$`Pr(>F)` %>%
  as.data.frame() %>%
  rename(p_value = 1) %>%
  drop_na() %>%
  mutate(sig = cut(p_value, 
                   breaks = c(0, 0.001, 0.01, 0.05, .10, 1),
                   labels = c("***", "**", "*", ".", "NS"))) %>%
  mutate(axis = paste0("RDA", row_number())) %>%
  relocate(axis)
```

The model is statistically significant (P \< 0.001). All of the axes are significant, although this may be related to the large sample size.

```{r bec-nest}
to_nest <- bec_normal %>%
  select(-percentage_first_returns_above_mean,
         -loreys_height,
         -elev_stddev,
         -elev_mean)

bec_nested <- to_nest %>%
  group_by(bec) %>%
  nest() %>%
  ungroup() %>%
  rename(strata = bec)

class_nested <- to_nest %>%
  group_by(category) %>%
  nest() %>%
  ungroup() %>%
  rename(strata = category)


# # vlce sampling regime to get the samples up
# switched away from this to a single double stratified sample
# vlce_samples <- read_sf(here::here("data", "samples", "vlce_extracted.shp"))
# 
# vlce_df <- vlce_samples %>%
#   st_drop_geometry() %>%
#   select(-category_1, -category_2) %>%
#   rename(category = strata) %>%
#   relocate(bec) %>%
#   drop_na() %>%
#   ungroup()
# 
# names(vlce_df) <- names_manual
# 
# vlce_normal <- vlce_df %>%
#   mutate(across(basal_area:VarDHI,  .fns = ~ normal(.x))) 
# 
# to_nest <- vlce_normal %>%
#   select(-percentage_first_returns_above_mean,
#          -loreys_height,
#          -elev_stddev,
#          -elev_mean)
# 
# 
# 
# 
# class_nested <- to_nest %>%
#   group_by(category) %>%
#   slice_sample(n = 3000) %>%
#   nest() %>% 
#   ungroup() %>%
#   rename(strata = category)

strata_nested <- bind_rows(bec_nested, class_nested)
```

```{r}
# linear relationships * homoschedasticity check

bec_normal %>%
  pivot_longer(cols = ends_with("DHI"),
               names_to = "dhi",
               values_to = "dhi_val") %>%
  pivot_longer(
    cols = basal_area:total_biomass,
    names_to = "struct",
    values_to = "struct_val"
  ) %>%
  ggplot(aes(x = struct_val, y = dhi_val)) +
  geom_hex() +
  facet_grid(rows = vars(dhi),
             cols = vars(struct),
             scales = "free") +
  labs(x = "Structure Value (Normalized)",
       y = "DHI Value (Normalized)")

strata_nested_long <- strata_nested %>%
  unnest(cols = data) %>%
  pivot_longer(cols = ends_with("DHI"),
               names_to = "dhi",
               values_to = "dhi_val") %>%
  pivot_longer(
    cols = basal_area:total_biomass,
    names_to = "struct",
    values_to = "struct_val"
  ) %>%
  group_by(strata) %>%
  group_split()

test <- function(df) {
  strata <- df %>%
    pull(strata) %>%
    unique()
  
  plot <- df %>% ggplot(aes(x = struct_val, y = dhi_val)) +
    geom_hex() +
    facet_grid(rows = vars(dhi),
               cols = vars(struct),
               scales = "free") +
    labs(x = "Structure Value (Normalized)",
         y = "DHI Value (Normalized)")
  
  ggsave(here::here("outputs", "linear", glue::glue("{strata}.png")))
}

map(strata_nested_long, test)
```


```{r rda-var-funs}
# function to take a tibble and get a list out outputs that can then be unnested and examined as needed. function(tibble) gets rda and varpart, as plottable objects ideally. then get the var_out$part$indfract. i'll also need to look at the significance using an anova at some point

my_rda_fun <- function(tibble) {
  dhi_tab <- tibble %>%
    select(ends_with("DHI"))
  
  rda(dhi_tab ~ elev_p95 + percentage_first_returns_above_2m + elev_cv + # simple/raw/primary
      basal_area + gross_stem_volume + total_biomass, # modelled, put condition here for a conditional rda
      data = tibble)
}

my_var_fun <- function(tibble) {
  dhi_tab <- tibble %>%
    select(ends_with("DHI"))
  
  primary <- tibble %>%
    select(elev_p95,
           elev_cv,
           # elev_stddev,
           percentage_first_returns_above_2m)
  
  modelled <- tibble %>%
    select(basal_area,
           total_biomass,
           gross_stem_volume)
  
  varpart(dhi_tab, primary, modelled)
}
```

```{r rda-var-bec}
outs <- strata_nested %>%
  mutate(rda = map(data, my_rda_fun, .progress = "RDA"),
         var = map(data, my_var_fun, .progress = "VAR")) 
```

```{r fracts-out}

fracts_out <- outs %>%
  mutate(indfracts = map(var, .f = function(x) {
    x$part$indfract %>%
      mutate(type = c("primary", "modelled", "overlap", "residual")) %>%
      select(type, Adj.R.squared) %>%
      pivot_wider(names_from = type, values_from = Adj.R.squared)
    }
    )) %>%
  unnest(indfracts) %>%
  arrange(desc(residual)) %>%
  select(strata, primary, modelled, overlap) %>%
  pivot_longer(c(primary, modelled, overlap)) %>%
  mutate(value = ifelse(value > 0, value, 0)) %>%
  pivot_wider()

fracts_out %>% 
  mutate(total = primary + modelled + overlap) %>%
  arrange(strata %in% forest_types,
          desc(total))
```

```{r}
fract_all <- path_r2 %>% 
  pivot_wider(names_from = type, values_from = Adj.R.squared) %>% 
  select(-residual) %>%
  mutate(strata = "British Columbia") %>% 
  relocate(strata)

fracts_all <- bind_rows(fracts_out,
                        fract_all)

fracts_tot <- fracts_all %>% 
  mutate(total = primary + modelled + overlap) %>%
  select(strata, total)

fracts_bar_tab <- fracts_all %>%
  pivot_longer(-strata) %>%
  left_join(keys$bec, by = c("strata" = "zone")) %>%
  mutate(group = ifelse(is.na(group), "Forest Types", group),
         group = ifelse(strata == "British Columbia", "BC", group)) %>%
  left_join(fracts_tot) %>%
  mutate(zone_nm = ifelse(is.na(zone_nm), strata, zone_nm))


fracts_bar_tab

fracts_bar_plot <- fracts_bar_tab %>%
  ggplot(aes(x = value, y = fct_reorder(zone_nm, total), fill = str_to_title(name))) +
  geom_col(position = "stack", col = "white") +
  facet_grid(rows = vars(fct_reorder(group, total, .desc = T)),
             scales = "free_y",
             space = "free") +
  labs(x = "Variance Explained",
       y = NULL,
       fill = NULL) +
  theme(legend.position = "bottom",
        panel.spacing.y = unit(0, "lines")) +
  guides(fill = guide_legend(reverse = T)) +
  scale_x_continuous(labels = scales::label_percent()) +
  scale_fill_manual(values = c("#6666ff", "#c22966", "#ff6666"))

fracts_bar_plot
ggsave(here::here("outputs", "fracts_bar_plot.png"), plot = fracts_bar_plot,
       height = 6, width = 8)
```

```{r raincloud-plot}
library(ggdist)
fracts_out %>%
  mutate(total = primary + modelled + overlap) %>%
  #left_join(keys$bec, by = c("bec" = "zone")) %>%
  pivot_longer(-strata) %>%
  mutate(name = str_to_title(name)) %>%
  mutate(value = ifelse(value < 0, 0, value),
         class = ifelse(strata %in% forest_types, 
                        "Forest Types", 
                        "BEC Zones")) %>%
  ggplot(aes(x = value, y = name)) +
  stat_halfeye(
    # adjust bandwidth
    adjust = .5,
    # move to the right
    justification = -0.2,
    # remove the slub interval
    .width = 0,
    point_colour = NA
    ) +
  geom_boxplot(
    width = 0.12,
    # removing outliers
    outlier.color = NA,
    alpha = 0.5
  ) +
  stat_dots(
    # ploting on left side
    side = "left",
    # adjusting position
    justification = 1.1,
    # adjust grouping (binning) of observations
    binwidth = 0.0025,
    #position = "stack",
    # aes(fill = group, col = group),
    alpha = 0.5,
    aes(shape = class)
  ) +
  labs(y = NULL,
       x = "% Variance Explained",
       fill = "BEC Group",
       col = "BEC Group") +
  scale_x_continuous(labels = scales::label_percent()) +
  theme_bw() +
  theme(panel.grid = element_blank(),
        legend.position = c(0.8, .2))

```

```{r path-setup}
path_base <- tibble(x1 = c(0,
             0,
             0,
             0,
             1),
       y1 = c(1,
              -1,
              1,
              -1,
              0),
       x2 = c(1.85,
              1.85,
              .85,
              .85,
              1.85),
       y2 = c(.15,
              -.15,
              .15,
              -.15,
              0)) %>%
  ggplot(aes(x = x1, y = y1)) +
  geom_segment(aes(xend = x2, yend = y2), arrow = arrow()) +
  geom_point(data = tibble(x1 = c(.85, .85), 
                           y1 = c(-.5, .5)),
             size = 60,
             shape = 21,
             col = "grey") +
  # geom_text(aes(x = 0, y = -1.15), label = "Modelled\nAttributes") +
  # geom_text(aes(x = 0, y = 1.15), label = "primary\nAttributes") +
  # geom_text(aes(x = .65, y = 0), label = "Overlap") +
  # geom_text(aes(x = 2, y = 0), label = "Dynamic\nHabitat\nIndices") +
  theme_void() +
  scale_x_continuous(limits = c(-0.1, 2.1))

ggsave(here::here("outputs", "path_base.png"), path_base)

path_r2_plot <- tibble(type = c("primary", "modelled", "overlap"),
       x1 = c(0.85, 0.85, 0.85),
       y1 = c(0.75, -0.75, 0))
```

```{r path-global}
var_oi <- c("VarDHI", "MinDHI", "CumDHI")
#var_oi <- c("VarDHI", "MinDHI")

var_out <- varpart(dhi_tab %>%
                     select(any_of(var_oi)),
                   primary, modelled)

# plot(var_out, Xnames = c("Primary", "Modelled"))

path_r2 <- var_out$part$indfract %>%
      mutate(type = c("primary", "modelled", "overlap", "residual")) %>%
      select(type, Adj.R.squared) %>%
  tibble()


path_r2_clean <- path_r2_plot %>%
  left_join(path_r2) %>%
  mutate(r2_label = paste0(round(Adj.R.squared * 100, 2), "%"))

path_base +
  geom_text(data = path_r2_clean, aes(label = r2_label))

ggsave(here::here("outputs", "path_venn.png"),
        height = 3.5, width = 10)
```

```{r boxplots-dhi-bec}
bec_df %>%
  select(bec, ends_with("DHI")) %>%
  pivot_longer(cols = ends_with("DHI")) %>%
  group_by(name) %>% 
  left_join(keys$bec, by = c("bec" = "zone")) %>%
  mutate(bec = fct_reorder(bec, value)) %>%
  ggplot(aes(x = value, y = bec, fill = group)) +
  geom_boxplot() +
  facet_wrap(~name, scales = "free") +
  theme_bw() +
  theme(panel.grid = element_blank()) +
  labs(x = "DHI Value",
       y = NULL,
       fill = NULL) +
  scale_fill_discrete_c4a_cat(palette = "batlow")
```

```{r cum-min-hexplot}
bec_df %>% 
  select(bec, CumDHI, MinDHI) %>%
  left_join(keys$bec, by = c("bec" = "zone")) %>%
  ggplot(aes(x = CumDHI, y = MinDHI)) +
  geom_hex() +
  facet_wrap(~bec)
```

```{r eig-anova}
eig_outs <- outs %>%
  mutate(eig = map(
    rda,
    .f = function(rda) {
      rda_sum <- summary(rda)
      
      var_exp <- rda_sum$constr.chi / rda_sum$tot.chi
      
      rda_eig <- rda$CCA$eig %>%
        as.data.frame() %>%
        t() %>%
        as.data.frame() %>%
        tibble() %>%
        pivot_longer(cols = everything(), names_to = "axis",
                     values_to = "eigenvalue") %>%
        mutate(prop = eigenvalue / sum(eigenvalue),
               var_exp = prop * var_exp)
    }
  )) %>%
  unnest(eig) %>%
  select(strata, axis:var_exp)

anova_outs <- outs %>%
  mutate(
    anova = map(rda, .f = function(rda) {
      anova_out <- rda  %>%
        anova(by = "axis")
      
      anova_out$`Pr(>F)` %>%
        as.data.frame() %>%
        rename(anova_p = 1) %>%
        drop_na() %>%
        mutate(anova_sig = cut(
          anova_p,
          breaks = c(0, 0.001, 0.01, 0.05, .10, 1),
          labels = c("***", "**", "*", ".", "NS")))  %>%
        mutate(axis = paste0("RDA", row_number())) %>%
        relocate(axis)
  }, .progress = "anovas"))

anova_sig_axes <- anova_outs %>%
  select(strata, anova) %>%
  unnest(cols = anova) # %>%
  # filter(anova_sig != "NS")

axis_varexp <- anova_sig_axes %>%
  inner_join(eig_outs)

axis_varexp %>%
  filter(anova_sig != "NS") %>%
  filter(strata %in% forest_types)

axis_varexp %>%
  filter(anova_sig != "NS") %>%
  mutate(category = ifelse(strata %in% forest_types, "Forest Types", "BEC Zones")) %>%
  # left_join(keys$bec, by = c("bec" = "zone")) %>%
  ggplot(aes(x = axis, y = var_exp, col = category, shape = category)) +
  geom_jitter(height = 0, width = 0.05) +
  theme(legend.position = "bottom") +
  labs(x = NULL,
       y = "% of Variance Explained",
       col = NULL,
       shape = NULL) +
  scale_y_continuous(labels = scales::label_percent())
# no secondary axis in alpine & coast.

axis_varexp %>%
  group_by(strata) %>%
  # filter(n() == 2) %>%
  select(strata, axis, var_exp) %>% 
  pivot_wider(names_from = axis,
              values_from = var_exp) %>%
  mutate(ratio = RDA1 / RDA2)

# smaller ratios present when the RDA1 doesn't explain much. when variance explained
# is low, the ratio is low. this is because there isn't much variance explained
```

```{r varexp-coniferous}
rda_varexp <- outs %>%
  mutate(varexp = map(rda, .f = \(rda) {
    rda_sum <- summary(rda)
    var_exp <- rda_sum$constr.chi / rda_sum$tot.chi
  })) %>%
  unnest(varexp) %>%
  arrange(desc(varexp)) %>%
  select(strata, varexp)

rda_varexp %>%
  arrange(strata %in% forest_types,
          desc(varexp))

source(here::here("scripts", "get_bec_proportion_vlce.R"))


prop_con <- bec_normal %>% 
  select(bec, category) %>% 
  group_by(bec) %>% 
  summarize(per_sample_for = mean(category == "Coniferous")) %>% 
  left_join(per_cons %>% 
              select(-value)) %>% 
  mutate(for_dif = per_sample_for - per_con) %>%
  arrange(desc(abs(for_dif))) %>%
  select(-for_dif) %>%
  pivot_longer(starts_with("per"))

con_var_plot <- prop_con %>%
  filter(name == "per_con") %>%
  left_join(rda_varexp, by = c("bec" = "strata")) %>% 
  left_join(keys$bec, by = c("bec" = "zone")) %>%
  mutate(name = ifelse(name == "per_con", 
                       "Global Percent Coniferous", 
                       "Sample Percent Coniferous")) %>%
  ggplot(aes(x = value, y = varexp)) +
  geom_point(aes(col = group)) +
  geom_smooth(method = "lm") +
  scale_x_continuous(labels = scales::label_percent()) +
  scale_y_continuous(labels = scales::label_percent()) +
  labs(x = "Percent Coniferous",
       y = "Proportion of variance explained",
       col = NULL) +
  theme(legend.position = c(0.1, 0.85))

ggsave(here::here("outputs", "con_var.png"), plot = con_var_plot)
```

```{r bec-loadings}
out_loadings <- outs %>%
  mutate(loadings = map(rda, .f = function(rda) {
    summary(rda)$sites %>%
      as.data.frame() %>%
      select(starts_with("RDA"))
  }),
  loadings = map2(.x = loadings, .y = data, .f = bind_cols),
  loadings = map(loadings, .f = function(x) {
    rcorr <- x %>% select(-any_of(c("bec", "category"))) %>%
      as.matrix() %>%
      Hmisc::rcorr()
    
    rvals <- rcorr$r %>%
      as.data.frame() %>%
      select(starts_with("RDA")) %>%
      mutate(var = row.names(.)) %>%
      pivot_longer(starts_with("RDA"),
                   values_to = "axis_loading",
                   names_to = "axis") %>%
      filter(!startsWith(var, "RDA"))
    
    pvals <- rcorr$P %>%
      as.data.frame() %>%
      select(starts_with("RDA")) %>%
      mutate(var = row.names(.)) %>%
      pivot_longer(starts_with("RDA"),
                   values_to = "axis_p",
                   names_to = "axis") %>%
      filter(!startsWith(var, "RDA"))
    
    left_join(rvals, pvals) %>%
      mutate(n = rcorr$n[[1, 1]])
  }
  
  )) %>%
  select(strata, loadings) %>%
  unnest(loadings)
```

```{r}
sig_loads <- out_loadings %>% 
  mutate(loading_sig = cut(
          axis_p,
          breaks = c(0, 0.001, 0.01, 0.05, .10, 1),
          labels = c("***", "**", "*", ".", "NS"),
          right = F)) %>%
  inner_join(anova_sig_axes) %>%
  #filter(axis_sig == "NS") %>%
  arrange(desc(abs(axis_loading))) %>%
  filter(!(var %in% c("percentage_first_returns_above_mean", 
                    "elev_mean", 
                    "elev_stddev"))) %>%
  drop_na()# removes ima mindhi which has no variance

sig_loads %>%
  filter(anova_sig != "NS") %>%
  filter(endsWith(var, "DHI"),
         axis == "RDA2") %>%
  arrange(strata) %>%
  select(strata, var, axis_loading) %>%
  pivot_wider(names_from = var,
              values_from = axis_loading)
# when a second axis is present, it has a weak loading on the cumulative DHI, as compared to the other DHIs
# while the majoirty of the variability is contained within all three DHIs together, the second axis, when present, is more linked to the minmimum and variation DHI.

sig_loads %>%
  select(strata, var, axis, axis_loading, loading_sig) %>%
  filter(endsWith(var, "DHI"),
         loading_sig != "NS") %>%
  ggplot(aes(x = var, y = abs(axis_loading), group = strata)) +
  geom_point(aes(col = strata)) +
  geom_line(aes(col = strata), alpha = 0.5, lty = "dashed") +
  geom_hline(yintercept = 0, col = "red", alpha = 0.2) +
  facet_wrap(~axis) +
  theme_bw() +
  theme(panel.grid = element_blank()) +
  labs(x = NULL,
       y = "Axis Loading")

sig_loads %>%
  select(strata, var, axis, axis_loading) %>%
  filter(!endsWith(var, "DHI")) %>%
  left_join(keys$continuous, by = c("var" = "variable")) %>%
  ggplot(aes(x = var_long, y = abs(axis_loading), group = strata)) +
  geom_point(aes(col = strata)) +
  geom_line(aes(col = strata), alpha = 0.5, lty = "dashed") +
  geom_hline(yintercept = 0, col = "red", alpha = 0.2) +
  facet_wrap(~axis) +
  theme(axis.text.x = element_text(angle = 45,
                                   hjust = 1)) +
  labs(x = NULL,
       y = "Axis Loading (Absolute Value)")

sig_loads %>%
  filter(!endsWith(var, "DHI"),
         loading_sig != "NS") %>%
  group_by(strata, axis) %>%
  mutate(loading_rank = data.table::frankv(abs(axis_loading), 
                                           order = -1)) %>%
  ggplot(aes(x = fct_reorder(var, loading_rank),
             y = loading_rank, col = strata)) +
  geom_jitter(height = 0) +
  facet_wrap(~axis) +
  theme(axis.text.x = element_text(angle = 45, 
                                   hjust = 1)) +
  labs(x = NULL,
       y = "Axis Loading Rank")

# need to remove the correlations for variables that arent actually involved
# percentage_first_returns_above_mean, elev_mean, elev_stddev
out_loadings %>% count(var)

clean_loads_raw <- sig_loads %>%
  filter(anova_sig != "NS",
         loading_sig != "NS") %>%
  bind_rows(all_data_loadings %>%
              mutate(strata = "British Columbia") %>%
              rename(loading_sig = sig)) %>%
  select(strata:axis_loading) 

clean_loads_abs <- clean_loads_raw %>%
  mutate(axis_loading = abs(axis_loading))
```

# run to here for analysis to be done

radar chart based on groups, not hierarchical clustering

```{r radar}
gg_color_hue <- function(n) {
  hues = seq(15, 375, length = n + 1)
  hcl(h = hues, l = 65, c = 100)[1:n]
}

n = 8
cols = c4a(palette = "rainbow", n = 8)




radar_loads <- clean_loads %>%
  pivot_wider(names_from = var, 
              values_from = axis_loading) %>%
  left_join(keys$bec, by = c("strata" = "zone")) %>%
  mutate(group = ifelse(is.na(group), "Forest Types", group),
         group = ifelse(strata == "British Columbia", "British Columbia", group),
         group = ifelse(axis == "RDA2", "RDA2", group)) %>%
  group_by(group) %>%
  summarize(across(CumDHI:elev_p95, \(x) mean(x, na.rm = T))) %>%
  mutate(group = fct_relevel(group, "RDA2", after = Inf),
         group = fct_relevel(group, "Forest Types", after = 1))

radar_labels <- radar_loads %>%
  select(-group, -ends_with("DHI")) %>%
  colnames() %>%
  tibble(variable = .) %>%
  left_join(keys$continuous) %>%
  pull(var_long)

in_radar <- radar_loads %>%
  select(!ends_with("DHI")) %>%
  replace(is.na(.), 0) %>%
  ggradar(axis.labels = radar_labels,
          legend.title = "Cluster",
          values.radar = c("", "", 1),
          base.size = 1,
          background.circle.transparency = 0,
          group.point.size = 2,
          group.colours = cols,
          axis.label.size = 3,
          plot.extent.x.sf = 1.5,
          group.line.width = 1) +
  theme(legend.position = "none")

out_radar <- radar_loads %>%
  select(group, ends_with("DHI")) %>%
  replace(is.na(.), 0) %>%
  
  ggradar(legend.title = "Cluster",
          values.radar = c("", "", 1),
          base.size = 1,
          background.circle.transparency = 0,
          group.point.size = 2,
          group.colours = cols,
          axis.label.size = 3,
          plot.extent.x.sf = 1.5,
          group.line.width = 1) +
  theme(legend.position = "none")

boxplots <- clean_loads %>% 
  left_join(keys$continuous, by = c("var" = "variable")) %>%
  mutate(var_long = ifelse(is.na(var_long), var, var_long)) %>%
  select(!(divide_by:unit)) %>%
  left_join(keys$bec, by = c("strata" = "zone")) %>%
  mutate(group = ifelse(is.na(group), "Forest Types", group),
         group = ifelse(axis == "RDA2", "RDA2", group),
         group = ifelse(strata == "British Columbia", "British Columbia", group),
         inout = ifelse(endsWith(var, "DHI"), "Response", "Predictor")) %>%
  mutate(group = fct_relevel(group, "RDA2", after = Inf),
         group = fct_relevel(group, "Forest Types", after = 1)) %>%
  ggplot(aes(x = abs(axis_loading), y = fct_rev(fct_reorder(var_long, abs(axis_loading))))) +
  geom_boxplot(outlier.colour = "#00000000", width = .5) +
  geom_jitter(height = 0.1, aes(col = group, shape = group)) +
  facet_grid(cols = vars(axis),
             rows = vars(inout),
             scales = "free_y",
             space = "free_y") +
  labs(x = "Axis Loading (absolute)",
       y = NULL,
       col = NULL,
       shape = NULL) +
  theme(panel.spacing.y = unit(0, "lines"),
        legend.position = "right") +
  scale_shape_manual(values = c(17, 15, 16, 16, 16, 16, 16, 16)) +
  scale_colour_manual(values = cols)

radar_boxplot <- ((in_radar / out_radar) | boxplots)  +
  plot_annotation(tag_levels = "A") +
  plot_layout(guides = "collect") &
  theme(plot.tag = element_text(size = 12)) 

ggsave(here::here("outputs", "radar_boxplot.png"),
       plot = radar_boxplot,
       device = "png",
       height = 6,
       width = 8)
```

# drawio

```{r drawio}

# make dir
drawio_dir <- here::here("outputs", "drawio")

dir.create(drawio_dir, showWarnings = F)

# templates
one_rda <-
  read_lines(here::here(drawio_dir, "_rda_path-text_replace-RDA1.drawio"))

two_rda <-
  read_lines(here::here(drawio_dir, "_rda_path-text_replace-RDA2.drawio"))

# list to iterate
stratum <- clean_loads_raw %>%
  pull(strata) %>%
  unique()


# make sure everything gets change in rda fig
possibles <- clean_loads_raw %>%
  select(var, axis) %>%
  complete() %>%
  mutate(possible = paste(var, axis, sep = "-")) %>%
  pull(possible) %>%
  unique()


# fractions dfs
fract_all <- path_r2 %>% 
  pivot_wider(names_from = type, values_from = Adj.R.squared) %>% 
  select(-residual) %>%
  mutate(strata = "British Columbia") %>% 
  relocate(strata)

fracts_all <- fracts_out %>%
  bind_rows(fract_all)

# variance explained by axis

all_varexp <- rda_eig %>%
  filter(name != "RDA3") %>%
  mutate(strata = "British Columbia") %>%
  rename(axis = name) %>%
  select(-value)

varexp_all <- axis_varexp %>%
  filter(anova_sig != "NS") %>%
  select(strata, axis, prop, var_exp) %>%
  bind_rows(all_varexp)



for (s in stratum) {
  print(s)
  strata_tp <- clean_loads_raw %>%
    filter(strata == s) %>%
    mutate(textreplace = paste(var, axis, sep = "-"),
           axis_loading = as.character(round(axis_loading, digits = 2)))
  
  if (strata_tp %>% pull(axis) %>% unique() %>% length() == 1) {
    strata_drawio <- one_rda
  } else {
    strata_drawio <- two_rda
  }
  
  textreplace <- strata_tp %>%
    pull(textreplace)
  
  replaceval <- strata_tp %>%
    pull(axis_loading)
  
  for (i in 1:length(textreplace)) {
    text <- textreplace[[i]]
    val <- replaceval[[i]]
    
    strata_drawio <- str_replace(strata_drawio, text, val)
  }
  
  strata_drawio <- str_replace(strata_drawio, "title_strata", s)
  
  #strata_drawio <- strata_drawio[!str_detect(strata_drawio, "RDA")]
  # filter through all possibilities remaining, replace them with NS
  
  for (p in possibles) {
    strata_drawio <- str_replace(strata_drawio, p, "NS")
  }
  
  strata_fract <- fracts_all %>%
    filter(strata == s) %>%
    pivot_longer(primary:overlap) %>%
    mutate(value = (value * 100) %>%
             round(1) %>%
             paste0(., "%"))
  
  fract_names <- strata_fract %>%
    pull(name)
  
  fract_value <- strata_fract %>%
    pull(value)
  
  for (i in 1:length(fract_names)) {
    strata_drawio <-
      str_replace(strata_drawio, fract_names[[i]], fract_value[[i]])
  }
  
  strata_varexp <- varexp_all %>%
    filter(strata == s) %>%
    mutate(var_exp = (var_exp * 100) %>%
             round(1) %>%
             paste0(., "%"))
  
  axis_names <- strata_varexp %>%
    pull(axis) %>%
    paste("var_exp", ., sep = "-")
  
  axis_vals <- strata_varexp %>%
    pull(var_exp)
  
  for (i in 1:length(axis_names)) {
    strata_drawio <-
      str_replace(strata_drawio, axis_names[[i]], axis_vals[[i]])
  }
  
  write_lines(strata_drawio, here::here(drawio_dir, paste0(s, ".drawio")))
}
```

```{r complexity-iqr}
strata_nested %>% 
  unnest(data) %>% 
  ggplot(aes(x = fct_reorder(strata, elev_cv, IQR), y = elev_cv)) + 
  geom_boxplot() + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r study-map}
library(geodata)

provinces <- geodata::gadm(country = "Canada", level = 1, path = here::here("data", "province"))

prov_sf <- provinces %>%
  st_as_sf() %>%
  st_transform(3005)

bbox <- prov_sf %>%
  filter(NAME_1 == "British Columbia") %>%
  st_bbox()

usa <- geodata::gadm(country = "USA", level = 0, path = here::here("data", "usa")) %>%
  st_as_sf()

countries <- geodata::world(level = 0, path = here::here("data", "world")) %>%
  st_as_sf()

na_bbox <- countries %>%
  filter(GID_0 == "USA" |
         NAME_0 == "Canada") %>%
  st_bbox()

cad_bbox <- prov_sf %>%
  st_transform(3348) %>%
  st_bbox()

countries_map <- countries %>%
  filter(GID_0 == "USA" |
         NAME_0 == "Greenland") %>%
  st_transform(3348)

lakes <- read_sf(here::here("data", "great_lakes", "great_lakes.shp")) %>%
  st_transform(3348)

bec_map <- ggplot() +
  geom_sf(data = bcmaps::bc_bound(),
          fill = "grey70", col = NA) +
  geom_sf(
    data = prov_sf %>% filter(NAME_1 != "British Columbia"),
    fill = "grey70"
  ) +
  geom_sf(data = usa,
          fill = "grey50") +
  geom_sf(data = bec_dissolve %>%
            left_join(keys$bec),
          aes(fill = fct_reorder(zone_nm, zone)),
          colour = NA) +
  ggsci::scale_fill_igv() +
  labs(fill = NULL,
       linetype = NULL) +
  coord_sf(
    xlim = c(bbox$xmin - 300000, bbox$xmax),
    ylim = c(bbox$ymin, bbox$ymax),
    crs = 3005,
    datum = 4326
  ) +
  theme_grey() +
  theme(
    panel.background = element_rect(fill = "#525252"),
    panel.border = element_rect(colour = "black", fill = NA),
    legend.position = c(.15, .4),
    legend.background = element_rect(fill = NA),
    legend.box.background = element_rect(fill = "white")
  )

#ggsave(here::here("outputs", "bec_map_no_inset.png"), bec_map, device = "png")

inset = ggplot() +
  geom_sf(data = countries_map, fill = "grey50") +
  geom_sf(data = prov_sf %>% st_transform(3348) %>% filter(NAME_1 != "British Columbia"), fill = "grey70", size = 0.5) +
  geom_sf(data = prov_sf %>% st_transform(3348) %>% filter(NAME_1 == "British Columbia"), fill = "#e5e5e5", size = 0.5) +
  geom_sf(data = lakes, fill = "#525252") +
  geom_sf(data = bbox %>% st_as_sfc %>% st_transform(3348), fill = NA, colour = "red", size = 2) +
  coord_sf(xlim = c(cad_bbox$xmin - 300000, cad_bbox$xmax),
           ylim = c(cad_bbox$ymin, cad_bbox$ymax)) +
  theme_void() +
  theme(panel.border = element_rect(colour = "black"),
        panel.background = element_rect(fill = "#525252"))


# map_inset <- ggdraw(bec_map) +
#   draw_plot(inset, x = 0.7, y = 0.7, width = .28, height = .28)

map_inset <- bec_map + inset_element(inset, left = 0.71,
                                            bottom = 0.7,
                                            right = 1,
                                            top = 0.98, 
                                     align_to = "plot")

  
ggsave(here::here("outputs", "bec_map.png"), plot = map_inset, device = "png", height = 7, width = 10)

```

```{r bec-clim-tab}
climate_folder <- here::here("data", "climate")
clim_vars <- climate_folder %>%
  list.files(pattern = "csv$") %>%
  tools::file_path_sans_ext()

clim_vars <- clim_vars[!str_detect(clim_vars, "bec")]

bec_clim <- climate_folder %>%
  list.files(pattern = "bec.csv$",
             full.names = T) %>%
  read_csv() %>%
  mutate(var = clim_vars %>% rep(16) %>% sort) %>%
  select(bec = ZONE, mean = MEAN, var) %>%
  pivot_wider(values_from = mean,
              names_from = var)

bec_tab <- keys$bec %>%
  left_join(bec_clim, by = c("zone" = "bec")) %>%
  select(-order) %>%
  arrange(group, zone) %>%
  relocate(group) %>%
  mutate(across(ppt:tmin, \(x) round(x, digits = 1)))

write_csv(bec_tab, here::here("data", "climate.csv"))

knitr::kable(bec_tab)
```

```{r}
bec_normal %>%
  select(-elev_stddev,-loreys_height,-percentage_first_returns_above_mean,-elev_mean) %>%
  left_join(keys$bec, by = c("bec" = "zone")) %>%
  pivot_longer(basal_area:VarDHI) %>%
  ggplot(aes(x = value, y = bec, fill = group)) +
  geom_boxplot() +
  facet_wrap( ~ name)
```

# new radar loads

```{r}
clean_loads %>%
  pivot_wider(names_from = var, 
              values_from = axis_loading) %>%
  left_join(keys$bec, by = c("strata" = "zone")) %>%
  mutate(group = ifelse(is.na(group), strata, group),
         group = ifelse(strata == "British Columbia", "British Columbia", group)) %>%
  group_by(group, axis) %>%
  summarize(across(CumDHI:elev_p95, \(x) mean(x, na.rm = T))) %>%
  pivot_longer(CumDHI:elev_p95) %>%
  mutate(value = ifelse(is.na(value), 0, value)) %>%
  left_join(keys$continuous, by = c("name" = "variable")) %>%
  mutate(var_long = ifelse(is.na(var_long), name, var_long),
         order = endsWith(var_long, "DHI")) %>%
  ggplot(aes(x = fct_reorder(var_long, value, .desc = T), y = value)) +
  geom_col() +
  #coord_polar() +
  coord_flip() +
  facet_grid(cols = vars(group), rows = vars(axis)) +
  labs(x = "Variable",
       y = "Axis Loading (absolute)")

clean_loads %>%
  left_join(keys$bec, by = c("strata" = "zone")) %>%
  mutate(group = ifelse(is.na(group), strata, group),
         group = ifelse(strata == "British Columbia", "British Columbia", group)) %>%
  ggplot(aes(x = var, y = axis_loading, col = group)) +
  geom_line()
```

```{r}
clean_loads %>%
  left_join(keys$bec, by = c("strata" = "zone")) %>%
  mutate(group = ifelse(is.na(group), strata, group),
         group = ifelse(strata == "British Columbia", "British Columbia", group)) %>%
  pivot_wider(names_from = var, values_from = axis_loading) %>%
  select(-zone_nm, -order) %>%
  replace(is.na(.), 0) %>%
  GGally::ggparcoord(columns = 4:12,
                     groupColumn = "group",
                     scale = "globalminmax") +
  facet_wrap(~axis) +
  coord_flip()
```

# parallel coordinate plots

```{r}
data <- clean_loads_abs %>%
  left_join(keys$bec %>%
              select(strata = zone, group)) %>%
  left_join(keys$continuous %>%
              select(var = variable, var_long)) %>%
  mutate(group = ifelse(is.na(group), strata, group),
         var_long = ifelse(is.na(var_long), var, var_long)) %>%
  group_by(group, var_long, axis) %>%
  summarize(axis_loading = mean(axis_loading)) %>%
  ungroup() %>%
  complete(group, var_long, axis, fill = list(axis_loading = NA)) %>%
  mutate(inout = ifelse(endsWith(var_long, "DHI"), "Response", "Predictor"), 
         group = fct_relevel(group, "British Columbia", 
                             "Broadleaf", 
                             "Coniferous", 
                             "Mixed Wood", 
                             "Wetland-Treed", 
                             after = 0),
         var_long = fct_relevel(var_long, 
                                c("Canopy Height", "Canopy Cover", "Structural Complexity",
                                "Basal Area", "Aboveground Biomass", "Gross Stem Volume",
                                "Cumulative DHI", "Variation DHI", "Minimum DHI")))
  

# nojitter/lines
parcoord_noflip <- data %>%
  ggplot(aes(x = var_long, y = axis_loading)) +
  #geom_boxplot(col = "#00000025", outlier.alpha = 0) +
  
  geom_line(aes(col = group, group = group), lty = "dashed") +
  geom_point(aes(col = group, group = group, shape = group, fill = group)) +
  # geom_hline(yintercept = 0, lty = "dashed", col = "red") +
  facet_wrap(~paste(axis, inout),
             scale = "free") +
  #theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(x = NULL,
       y = "Axis Loading (absolute)",
       col = NULL,
       shape = NULL,
       fill = NULL) +
  # coord_flip() +
  scale_colour_discrete_c4a_cat(palette = "bold") +
  scale_fill_discrete_c4a_cat(palette = "bold") +
  scale_shape_manual(values = c(21, 22, 22, 22, 22, 25, 25, 25, 25, 25))

parcoord_noflip

ggsave(here::here("outputs", "parcoord_noflip.png"), plot = parcoord_noflip,
       height = 6, width = 8)

ggsave(here::here("outputs", "parcoord_noflip.svg"), plot = parcoord_noflip,
       height = 6, width = 8)
```

# rgb map

```{r}
bec_dissolve <- read_sf(here::here("data", "shapefiles", "bec_dissolve.shp")) %>%
  janitor::clean_names() %>%
  select(zone)


# non normalized
loadings_rgb <- clean_loads %>% 
  group_by(axis) %>%
  pivot_wider(names_from = var,
              values_from = axis_loading) %>%
  ungroup() %>%
  replace(is.na(.), 0) %>%
  mutate(across(elev_cv:elev_p95, \(x) ifelse(x > 0.5, 0.5, x))) %>%
  mutate(dhi_rgb = rgb(CumDHI, VarDHI, MinDHI),
         pri_rgb = rgb(elev_p95, percentage_first_returns_above_2m, elev_cv, maxColorValue = 1),
         mod_rgb = rgb(basal_area, total_biomass, gross_stem_volume, maxColorValue = 1)) %>%
  select(strata, axis, percentage_first_returns_above_2m, elev_p95, elev_cv, ends_with("rgb")) %>%
  pivot_longer(ends_with("rgb"))

# normalized to max
loadings_rgb <- clean_loads %>% 
  group_by(var) %>%
  mutate(axis_loading = axis_loading / max(axis_loading)) %>%
  group_by(axis) %>%
  pivot_wider(names_from = var,
              values_from = axis_loading) %>%
  ungroup() %>%
  replace(is.na(.), 0) %>%
  #mutate(across(elev_cv:elev_p95, \(x) ifelse(x > 0.5, 0.5, x))) %>%
  mutate(dhi_rgb = rgb(CumDHI, VarDHI, MinDHI),
         pri_rgb = rgb(elev_p95, percentage_first_returns_above_2m, elev_cv, maxColorValue = 1),
         mod_rgb = rgb(basal_area, total_biomass, gross_stem_volume, maxColorValue = 1)) %>%
  #select(strata, axis, percentage_first_returns_above_2m, elev_p95, elev_cv, ends_with("rgb")) %>%
  pivot_longer(ends_with("rgb"))

becs <- bec_normal %>%
  pull(bec) %>%
  unique()

rgb_loads_split <- loadings_rgb %>%
  filter(strata %in% becs) %>%
  group_by(axis, name) %>%
  group_split()
```

```{r}
make_rgb_map <- function(tibble) {
  
  input <- bec_dissolve %>%
    left_join(tibble, by = c("zone" = "strata")) %>%
    mutate(value = ifelse(is.na(value), "#000000", value))

  rgb_cols = input %>%
    st_drop_geometry() %>%
    pull(value) %>%
    unique() %>%
    sort()
  
  input %>%
    ggplot(aes(x = zone, y = 2, fill = value)) +
    geom_col() +
    scale_fill_manual(values = rgb_cols)
  
   input %>%
    ggplot() +
    geom_sf(aes(geometry = geometry, fill = value, col = value), linewidth = 0.1) +
    scale_fill_manual(values = rgb_cols) +
    scale_color_manual(values = rgb_cols) +
    theme_void() +
    theme(legend.position = "none")
}

rgb_maps <- map(rgb_loads_split, make_rgb_map)

labels = c("DHI", "B - Modelled RDA1", "A - Primary RDA1", "DHI", "D - Modelled RDA2", "C - Primary RDA2")

# for (i in 1:length(rgb_maps)) {
#   print(i)
#   gg <- rgb_maps[[i]] + labs(title = labels[[i]])
#   
#   ggsave(here::here("outputs", "black_plots", paste(i, ".png")),
#          plot = gg,
#          height = 3,
#          width = 3)
# }

ggsave(here::here("outputs", "test_black.png"), rgb_maps[[6]])

patchwork_rgbplots <- (rgb_maps[[3]] + rgb_maps[[2]]) / 
                      (rgb_maps[[6]] + rgb_maps[[5]]) &
  plot_annotation(tag_levels = "A")

cowplot_rgb <- cowplot::plot_grid(rgb_maps[[3]], rgb_maps[[2]],
                                  rgb_maps[[6]], rgb_maps[[5]],
                                  labels = c("A - Primary RDA1", "B - Modelled RDA1",
                                             "C - Primary RDA2", "D - Modelled RDA2"),
                                  vjust = 1.25)

ggsave(here::here("outputs", "rgbplots_cow.png"), cowplot_rgb, height = 7, width = 8, bg = "white")


# ggsave(here::here("outputs", "rgbplots_norm.png"), patchwork_rgbplots,
#        height = 6,
#        width = 8)
# 
# print("png saved")

# ggsave(here::here("outputs", "rgbplots_norm.pdf"), patchwork_rgbplots,
#        height = 6,
#        width = 8)
# 
# print("pdf saved")
```

# parallel coordinate pos neg

```{r}
neg_pos <- clean_loads_raw %>%
  left_join(keys$bec %>%
              select(strata = zone, group)) %>%
  left_join(keys$continuous %>%
              select(var = variable, var_long)) %>%
  mutate(group = ifelse(is.na(group), strata, group),
         var_long = ifelse(is.na(var_long), var, var_long)) %>%
  group_by(group, var_long, axis) %>%
  summarize(n_pos = sum(ifelse(axis_loading > 0, 1, 0)),
            n_neg = sum(ifelse(axis_loading < 0, 1, 0)),
            axis_loading = mean(axis_loading)
            ) %>%
  ungroup() %>%
  complete(group, var_long, axis, fill = list(axis_loading = NA,
                                              n_pos = NA,
                                              n_neg = NA)) %>%
  mutate(pos_neg = case_when(n_pos > 0 & n_neg > 0 ~ "Mixed",
                             n_pos > 0 ~ "Positive",
                             n_neg > 0 ~ "Negative")) %>%
  select(-n_pos, -n_neg, -axis_loading)

data <- clean_loads_abs %>%
  left_join(keys$bec %>%
              select(strata = zone, group)) %>%
  left_join(keys$continuous %>%
              select(var = variable, var_long)) %>%
  mutate(group = ifelse(is.na(group), strata, group),
         var_long = ifelse(is.na(var_long), var, var_long)) %>%
  group_by(group, var_long, axis) %>%
  summarize(axis_loading = mean(axis_loading)) %>%
  ungroup() %>%
  complete(group, var_long, axis, fill = list(axis_loading = NA)) %>%
  left_join(neg_pos) %>%
  mutate(inout = ifelse(endsWith(var_long, "DHI"), "Response", "Predictor"), 
         group = fct_relevel(group, "British Columbia", 
                             "Broadleaf", 
                             "Coniferous", 
                             "Mixed Wood", 
                             "Wetland-Treed", 
                             after = 0),
         var_long = fct_relevel(var_long, 
                                c("Canopy Height", "Canopy Cover", "Structural Complexity",
                                "Basal Area", "Aboveground Biomass", "Gross Stem Volume",
                                "Cumulative DHI", "Variation DHI", "Minimum DHI")))
  

# nojitter/lines
parcoord_noflip <- data %>%
  ggplot(aes(x = var_long, y = axis_loading)) +
  #geom_boxplot(col = "#00000025", outlier.alpha = 0) +
  
  geom_line(aes(col = group, group = group), lty = "dashed") +
  geom_point(data = data %>% 
               filter(pos_neg == "Mixed"), aes(group = group, shape = group), size = 2.5, col = "black", fill = "black") +
  geom_point(data = data %>% 
               filter(pos_neg == "Positive"), aes(group = group, shape = group), size = 2.5, col = "red", fill = "red") +
  geom_point(data = data %>% 
               filter(pos_neg == "Negative"), aes(group = group, shape = group), size = 2.5, col = "grey", fill = "grey") +
  geom_point(aes(col = group, group = group, shape = group, fill = group)) +
  # geom_hline(yintercept = 0, lty = "dashed", col = "red") +
  facet_wrap(~paste(axis, inout),
             scale = "free") +
  #theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(x = NULL,
       y = "Axis Loading (absolute)",
       col = NULL,
       shape = NULL,
       fill = NULL) +
  # coord_flip() +
  scale_colour_discrete_c4a_cat(palette = "bold") +
  scale_fill_discrete_c4a_cat(palette = "bold") +
  scale_shape_manual(values = c(21, 22, 22, 22, 22, 25, 25, 25, 25, 25))

parcoord_noflip

ggsave(here::here("outputs", "parcoord_test.png"), plot = parcoord_noflip,
       height = 6, width = 8)

ggsave(here::here("outputs", "parcoord_noflip.png"), plot = parcoord_noflip,
       height = 6, width = 8)

ggsave(here::here("outputs", "parcoord_noflip.svg"), plot = parcoord_noflip,
       height = 6, width = 8)

```

```{r}
data %>%
  ggplot(aes(x = var_long, y = axis_loading)) +
  geom_point(aes(shape = group, col = pos_neg, fill = group)) +
  geom_line(aes(col = group)) +
  facet_wrap(~paste(axis, inout), scales = "free") +
  scale_shape_manual(values = c(21, 22, 22, 22, 22, 25, 25, 25, 25, 25)) +
  scale_fill_discrete_c4a_cat(palette = "bold") +
  scale_colour_manual(values = c("black", "grey", "red"))

ggsave(here::here("outputs", "parcoord_test.png"), height = 6, width = 8)
```

```{r}
clean_loads_raw %>%
  mutate(pos_neg = ifelse(axis_loading > 0, "Positive", "Negative")) %>%
  count(var, axis, pos_neg) %>%
  ggplot(aes(y = var, x = n, fill = pos_neg)) +
  geom_col() +
  facet_wrap( ~ axis)

clean_loads_raw %>%
  left_join(keys$bec %>%
              select(strata = zone, group)) %>%
  mutate(pos_neg = ifelse(axis_loading > 0, "Positive", "Negative")) %>%
  count(var, group, axis, pos_neg) %>%
  mutate(n = ifelse(pos_neg == "Positive", n, -n)) %>%
  ggplot(aes(y = var, x = n, fill = pos_neg)) +
  geom_col() +
  facet_grid(cols = vars(axis),
             rows = vars(group))
```

```{r}
groups <- keys$bec %>%
  pull(group) %>% unique()

lollipop_data <- clean_loads_raw %>%
  left_join(keys$bec %>%
              select(strata = zone, group)) %>%
  left_join(keys$continuous %>%
              select(var = variable, var_long)) %>%
  mutate(
    group = ifelse(is.na(group), strata, group),
    var_long = ifelse(is.na(var_long), var, var_long),
    pos_neg = ifelse(axis_loading > 0, "Positive", "Negative")
  ) %>%
  group_by(var_long, axis, group, pos_neg) %>%
  summarize(n = n(),
            avg_loading = mean(axis_loading)) %>%
  ungroup() %>%
  mutate(
    inout = ifelse(endsWith(var_long, "DHI"), "Response", "Predictor"),
    group = fct_relevel(
      group,
      "British Columbia",
      "Broadleaf",
      "Coniferous",
      "Mixed Wood",
      "Wetland-Treed",
      after = 0
    ),
    var_long = fct_relevel(
      var_long,
      c(
        "Canopy Height",
        "Canopy Cover",
        "Structural Complexity",
        "Basal Area",
        "Aboveground Biomass",
        "Gross Stem Volume",
        "Cumulative DHI",
        "Variation DHI",
        "Minimum DHI"
      )
    )
  )


lollipops <- lollipop_data %>%
  group_by(group %in% groups) %>%
  group_split()

left <- lollipops[[1]] %>%
  ggplot(aes(x = avg_loading,
             y = var_long,
             col = pos_neg)) +
  geom_point() +
  geom_segment(aes(
    x = avg_loading,
    xend = 0,
    y = var_long,
    yend = var_long
  )) +
  geom_vline(xintercept = 0,
             alpha = 0.5,
             lty = "dotted") +
  facet_grid(cols = vars(axis),
             rows = vars(group)) +
  theme(legend.position = "bottom") +
  labs(x = "Average Loading",
       y = NULL)

right = lollipops[[2]] %>%
  ggplot(aes(x = avg_loading,
             y = var_long,
             col = pos_neg)) +
  geom_point(aes(size = n)) +
  geom_segment(aes(
    x = avg_loading,
    xend = 0,
    y = var_long,
    yend = var_long
  )) +
  geom_vline(xintercept = 0,
             alpha = 0.5,
             lty = "dotted") +
  facet_grid(cols = vars(axis),
             rows = vars(group)) +
  theme(legend.position = "bottom",
        axis.text.y = element_blank()) +
  labs(x = "Average Loading",
       y = NULL)

left + right

ggsave(here::here("outputs", "chris.png"))
```

```{r}
lollipop_data %>%
  ggplot(aes(x = var_long, y = avg_loading)) +
  #geom_boxplot(col = "#00000025", outlier.alpha = 0) +
  geom_line(data = lollipop_data %>%
              filter(pos_neg == "Positive"), aes(col = group, group = group), lty = "dashed") +
  geom_line(data = lollipop_data %>%
              filter(pos_neg == "Negative"), aes(col = group, group = group), lty = "dashed") +
  geom_point(aes(col = group, group = group, shape = group, fill = group)) +
  # geom_hline(yintercept = 0, lty = "dashed", col = "red") +
  facet_wrap(~paste(axis, inout),
             scale = "free") +
  #theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(x = NULL,
       y = "Axis Loading (absolute)",
       col = NULL,
       shape = NULL,
       fill = NULL) +
  # coord_flip() +
  scale_colour_discrete_c4a_cat(palette = "bold") +
  scale_fill_discrete_c4a_cat(palette = "bold") +
  scale_shape_manual(values = c(21, 22, 22, 22, 22, 25, 25, 25, 25, 25))
```

# flip cum to positive

```{r}
zones <- keys$bec %>% pull(zone)

flip_cum <- function(data) {
  if(data %>% filter(var == "CumDHI") %>% nrow() == 0) {
    return(data)
  }
  flip <- data %>%
    filter(var == "CumDHI") %>%
    pull(axis_loading) %>%
    sign()
  
  data %>% mutate(axis_loading = axis_loading * flip)
}

clean_loads_cum_pos <- clean_loads_raw %>%
  group_by(strata, axis) %>%
  group_split() %>%
  map_dfr(., .f = flip_cum)

clean_loads_cum_pos %>%
  filter(strata %in% zones) %>%
  count(var, axis, sign = sign(axis_loading)) %>%
  pivot_wider(names_from = sign, values_from = n) %>%
  arrange(axis)


```

```{r}
groups <- keys$bec %>% pull(group) %>% unique()

clean_loads_joined <- clean_loads_cum_pos %>%
  left_join(keys$bec %>%
              select(strata = zone, group)) %>%
  left_join(keys$continuous %>%
              select(var = variable, var_long)) %>%
  mutate(
    group = ifelse(is.na(group), strata, group),
    var_long = ifelse(is.na(var_long), var, var_long),
    pos_neg = ifelse(axis_loading > 0, "Positive", "Negative")
  )

lollipop_data <- clean_loads_joined %>%
  group_by(var_long, axis, group, pos_neg) %>%
  summarize(n = n(),
            avg_loading = mean(axis_loading)) %>%
  ungroup() %>%
  mutate(
    inout = ifelse(endsWith(var_long, "DHI"), "Response", "Predictor"),
    group = fct_relevel(
      group,
      "British Columbia",
      "Broadleaf",
      "Coniferous",
      "Mixed Wood",
      "Wetland-Treed",
      after = 0
    ),
    var_long = fct_relevel(
      var_long,
      c(
        "Canopy Height",
        "Canopy Cover",
        "Structural Complexity",
        "Basal Area",
        "Aboveground Biomass",
        "Gross Stem Volume",
        "Minimum DHI",
        "Variation DHI",
        "Cumulative DHI"
      )
    )
  )


lollipops <- lollipop_data %>%
  group_by(group %in% groups) %>%
  group_split()

left <- lollipops[[1]] %>%
  ggplot(aes(x = avg_loading,
             y = var_long,
             col = pos_neg)) +
  geom_point() +
  geom_segment(aes(
    x = avg_loading,
    xend = 0,
    y = var_long,
    yend = var_long
  )) +
  geom_vline(xintercept = 0,
             alpha = 0.5,
             lty = "dotted") +
  facet_grid(cols = vars(axis),
             rows = vars(group)) +
  theme(legend.position = "bottom") +
  labs(x = "Average Loading",
       y = NULL)

right = lollipops[[2]] %>%
  ggplot(aes(x = avg_loading,
             y = var_long,
             col = pos_neg)) +
  geom_point(aes(size = n)) +
  geom_segment(aes(
    x = avg_loading,
    xend = 0,
    y = var_long,
    yend = var_long
  )) +
  geom_vline(xintercept = 0,
             alpha = 0.5,
             lty = "dotted") +
  facet_grid(cols = vars(axis),
             rows = vars(group)) +
  theme(legend.position = "bottom",
        axis.text.y = element_blank()) +
  labs(x = "Average Loading",
       y = NULL)

left + right

ggsave(here::here("outputs", "chris.png"))
```

```{r}
data <- clean_loads_joined %>%
  # mutate(axis_loading = abs(axis_loading)) %>%
  group_by(group, var_long, axis) %>%
  summarize(axis_loading = mean(axis_loading)) %>%
  ungroup() %>%
  complete(group, var_long, axis, fill = list(axis_loading = NA)) %>%
  mutate(inout = ifelse(endsWith(var_long, "DHI"), "Response", "Predictor"), 
         group = fct_relevel(group, "British Columbia", 
                             "Broadleaf", 
                             "Coniferous", 
                             "Mixed Wood", 
                             "Wetland-Treed", 
                             after = 0),
         var_long = ifelse(endsWith(var_long, "DHI"), var_long, str_replace_all(var_long, " ", "\n")),
         var_long = fct_relevel(var_long, 
                                c("Structural\nComplexity", "Canopy\nHeight", "Canopy\nCover",
                                "Basal\nArea", "Aboveground\nBiomass", "Gross\nStem\nVolume",
                                "Cumulative DHI", "Variation DHI", "Minimum DHI")))
  

# nojitter/lines
parcoord_noflip <- data %>%
  ggplot(aes(x = var_long, y = axis_loading)) +
  #geom_boxplot(col = "#00000025", outlier.alpha = 0) +
  
  geom_line(aes(col = group, group = group), lty = "dashed") +
  geom_point(aes(col = group, group = group, shape = group, fill = group)) +
  geom_hline(yintercept = 0, lty = "dotted", col = "grey", linewidth = 0.5) +
  facet_wrap(~paste(axis, inout),
             scale = "free") +
  #theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(x = NULL,
       y = "Axis Loading",
       col = NULL,
       shape = NULL,
       fill = NULL) +
  # coord_flip() +
  scale_colour_discrete_c4a_cat(palette = "bold") +
  scale_fill_discrete_c4a_cat(palette = "bold") +
  scale_shape_manual(values = c(21, 22, 22, 22, 22, 25, 25, 25, 25, 25))

parcoord_noflip

ggsave(here::here("outputs", "parcoord_noflip.png"), plot = parcoord_noflip,
       height = 6, width = 8)

# ggsave(here::here("outputs", "parcoord_noflip.svg"), plot = parcoord_noflip,
#        height = 6, width = 8)
```


# meg scatterplots
```{r}
scatter <- bec_normal %>%
  mutate(label = case_when(bec %in% c("CWH", "MS") ~ bec,
                           T ~ "Other"))

ggplot(data = scatter, aes(col = label), alpha = 0.25) +
  geom_point(aes(x = percentage_first_returns_above_2m, y = CumDHI)) +
  geom_density(aes(x = percentage_first_returns_above_2m)) +
  geom_density(aes(y = CumDHI)) +
  scale_fill_manual(values = c("grey", "red", "blue")) +
  scale_colour_manual(values = c("grey", "red", "blue"))

ggplot() +
  geom_point(data = bec_df, aes(x = percentage_first_returns_above_2m, y = CumDHI), alpha = 0.5) +
  geom_point(data = bec_df %>%
               filter(bec == "CWH"), aes(x = percentage_first_returns_above_2m, y = CumDHI), col = "orange") +
  geom_point(data = bec_df %>%
               filter(bec == "MS"), aes(x = percentage_first_returns_above_2m, y = CumDHI), col = "red") +
  geom_histogram(data = bec_df, aes(x = percentage_first_returns_above_2m)) +
  geom_histogram(data = bec_df, aes(y = CumDHI))
```

```{r}
fracts_out

strata_nested %>% 
  unnest(cols = data) %>%
  select(-bec, -category) %>%
  left_join(keys$bec, by = c("strata" = "zone")) %>%
  mutate(group = ifelse(is.na(group), "Forest Type", group)) %>%
  ggplot() +
  geom_boxplot(aes(x = fct_reorder(.f = strata, .x = MinDHI, .fun = mean), y = MinDHI, fill = group))
```

```{r}
strata_nested %>% 
  unnest(cols = data) %>%
  select(-bec, -category) %>%
  group_by(strata) %>%
  summarize(across(basal_area:VarDHI, .fns = sd)) %>%
  left_join(keys$bec, by = c("strata" = "zone")) %>%
  mutate(group = ifelse(is.na(group), "Forest Type", group)) %>%
  select(strata, group, basal_area:VarDHI) %>%
  pivot_longer(-c(strata, group)) %>%
  left_join(fracts_out) %>%
  mutate(varexp = primary + modelled + overlap) %>%
  ggplot(aes(x = value, y = varexp, col = group)) +
  geom_point() +
  facet_wrap(~name, strip.position = "bottom") +
  labs(x = NULL,
       y = "Variation Explained",
       title = "x axis is sd of variable") +
  theme(strip.placement = "outside",
        strip.background = element_blank())
```

```{r}
bec_df %>%
  left_join(fracts_out %>%
              mutate(all = (primary + modelled + overlap) * 100) %>%
              select(strata, all), by = c("bec" = "strata")) %>%
  mutate(facet = paste0(bec, " (", round(all, 2), "%)")) %>%
  ggplot(aes(x = percentage_first_returns_above_2m / 100, y = CumDHI)) +
  geom_hex(aes(fill = after_stat(log(count)))) +
  labs(x = "Canopy Cover (%)") +
  facet_wrap(~fct_reorder(facet, all)) +
  theme(legend.position = "bottom")

ggsave(here::here("outputs", "supplement_hex.png"),
       height = 6, width = 8)
```

